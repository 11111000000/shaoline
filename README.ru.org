#+AUTHOR: Бродячий Байт (следуя за пастушком вола)
#+EMAIL: 11111000000@email.com
#+LANGUAGE: ru
#+OPTIONS: num:nil ^:nil toc:2

* Shaoline – Строка Пустоты  

#+begin_quote
«Строка, которую можно увидеть, — не истинная строка».
 (Лао-Цзы, Emacs 27+)
#+end_quote

#+ATTR_ORG: :width 80%
[[file:screenshot-shaoline.png]]

Были времена, когда каждый буфер носил тяжёлый пояс из глифов, чисел и виджетов.  
Наступил вечер, и маленький Lisp-файл обрился налысо, сел тихо в эхо-области и просто /был/.  
Этот файл — /Shaoline/.

Shaoline заменяет классическую mode-line минималистичной строкой в эхо-области — она исчезает, если Emacs хочет произнести нечто важное, или остаётся, если таково ваше желание.  
Он делает /ровно достаточно/ — и не более.  
Путь заключается в недеянии — и всё совершается само.

#+begin_quote
«Когда не делается ничего, ничто не остаётся несделанным».
— Дао Дэ Цзин, §48
#+end_quote

** Быстрый чайник (TL;DR)

#+begin_src emacs-lisp
(use-package shaoline
  :ensure t
  :config
  (shaoline-mode 1))
#+end_src

Постигли суть? Можете не читать дальше.  
Вам нужно подробнее? Погружайтесь в поток.

** Описание

1. /Только эхо-область/ — никаких child-frame, перехвата окон, подмены фреймов.
2. /Функциональное ядро/ — каждый сегмент это чистая функция: вход → строка.
3. /Без таймеров по умолчанию/ — строка обновляется лишь по событиям; таймер начинается только при необходимости (часы, батарея).
4. /Обновления с дебаунсом/ — много событий за короткое время приводят к единственной перерисовке (нет мерцания).
5. /Optionally скрывает старую mode-line/ — наблюдайте пустоту, если пожелаете.
6. /Никаких принудительных зависимостей/ — иконки, батарея, проекты и всё остальное подключаются лениво/по требованию.
7. /Дружественен тестированию/ — компоновщик полностью детерминирован и без побочных эффектов.
8. /Тексты в центре сохраняются/ — последнее непустое сообщение не исчезает, пока не появится новое.
9. /Чаньский Юмор/ — иногда появляется ироничная строка.
10. /Можно отображать строку поверх сообщений/ — строка остаётся даже при новых (message), сообщение отображается в центре.

#+begin_quote
Ученик: «Наставник, сколько у Shaoline зависимостей?»  
Наставник: «Му».
— классический коан
#+end_quote

** Установка

*** GNU ELPA / MELPA

#+begin_src emacs-lisp
M-x package-install RET shaoline RET
#+end_src

*** Прямое подключение (Straight, Quelpa, git)

Клонируйте репозиторий и добавьте путь к =load-path=, или установите через предпочитаемый пакетный менеджер.  
Требуется Emacs 27.1+.

** Философия → Настройка

Shaoline по умолчанию готов для большинства пользователей.  
Но Путь индивидуален: настраивайте под себя.

#+begin_src emacs-lisp
(setq shaoline-segments
      '((:left   shaoline-segment-major-mode-icon
                 shaoline-segment-buffer-name
                 shaoline-segment-modified
                 shaoline-segment-minor-modes)
        (:center shaoline-segment-echo-message)
        (:right  shaoline-segment-position
                 shaoline-segment-project-name
                 shaoline-segment-git-branch
                 shaoline-segment-battery
                 shaoline-segment-input-method
                 shaoline-segment-digital-clock
                 shaoline-segment-moon-phase)))
#+end_src

Порядок сегментов настраиваемый.  
Типичные переменные:

| Переменная                        | По умолчанию | Описание                                                          |
|-----------------------------------+--------------+-------------------------------------------------------------------|
| shaoline-enable-dynamic-segments  | t            | Отключите — никаких таймеров/тяжёлых зависимостей                 |
| shaoline-timer-interval           | 1            | Интервал (сек) для фонового обновления (если таймер включён)       |
| shaoline-always-visible           | t            | Если t — строка всегда видна, даже при (message ...)               |
| shaoline-enable-hooks             | t            | Если nil — никакие хуки не ставятся, только ручное обновление     |
| shaoline-attach-advices           | t            | Если nil — не добавлять advice ни на что, абсолютно чистый режим  |
| shaoline-attach-hooks             | t            | Если nil — глобальные хуки не трогаются                           |
| shaoline-message-timeout          | 10           | Сколько секунд ждать перед возвращением после сообщения            |
| shaoline-project-name-ttl         | 2            | TTL (сек) кэша имени проекта                                      |
| shaoline-battery-ttl              | 5            | TTL (сек) кэша батареи                                            |
| shaoline-autohide-modeline        | t            | Прятать классическую mode-line                                    |
| shaoline-exclude-modes            | список       | Режимы, где mode-line не скрывать                                 |
| shaoline-update-hooks             | список       | Список хуков, запускающих перерасчёт                              |
| shaoline-right-padding            | 0            | Отступ справа                                                     |
| shaoline-debug                    | nil          | Вести лог в //shaoline-logs//                                     |

Настройка:

#+begin_src emacs-lisp
M-x customize-group RET shaoline RET
#+end_src

** Полностью чистый режим (чистое недеяние)

Максимальный контроль:

#+begin_src emacs-lisp
(setq shaoline-enable-hooks nil
      shaoline-always-visible nil
      shaoline-enable-dynamic-segments nil
      shaoline-attach-advices nil
      shaoline-attach-hooks nil)
(shaoline-mode 1)
(global-set-key (kbd "<f8>") #'shaoline--update)
#+end_src

Для полной очистки всех следов Shaoline:

#+begin_src emacs-lisp
(shaoline-purge-infra)
#+end_src

** TTL-кэш для ресурсозатратных сегментов

Сегменты, требующие много IO (shaoline-segment-project-name, shaoline-segment-battery), кэшируются на их TTL в секундах.
Сегмент батареи дополнительно использует асинхронную загрузку (`async-start`) для неблокирующего обновления, показывая "Batt..." как placeholder во время вычисления.

** Настройка кэша — через =M-x customize-group RET shaoline-caching RET=.
** Для немедленного запроса свежих данных используйте алиас-функции:

#+begin_src emacs-lisp
(shaoline--segment-project-name-raw)
(shaoline--segment-battery-raw)
#+end_src
** Стандартные сегменты

| Символ                           | Что показывает                           | Требует пакет         |
|----------------------------------+------------------------------------------+----------------------|
| shaoline-segment-position        | Строка:столбец                           | —                    |
| shaoline-segment-modified        | “*”, если буфер изменён                  | —                    |
| shaoline-segment-echo-message    | Последнее непустое сообщение (центр)     | —                    |
| shaoline-segment-minor-modes     | Важные minor-modes (иконки)              | —                    |
| shaoline-segment-project-name    | Имя проекта (project/projectile)         | projectile (опц.)    |
| shaoline-segment-git-branch      | Текущая ветка git                        | vc-git (builtin)     |
| shaoline-segment-battery         | Состояние батареи (асинхронно)           | battery.el, async.el |
| shaoline-segment-input-method    | Активный метод ввода/раскладка           | —                    |
| shaoline-segment-digital-clock   | Электронные часы                         | calendar.el          |
| shaoline-segment-moon-phase      | Фаза луны (значок или ASCII)             | calendar.el          |

Убирайте всё лишнее — просветление легкое, как перо.

** Интеграции и кастомные сегменты

Shaoline легко сочетается с flycheck, evil и другими пакетами. Сегменты можно подключать динамически.

** /Evil-mode/ — состояние режима:

  #+begin_src emacs-lisp
  (shaoline-define-simple-segment shaoline-segment-evil-state
    "Показывает состояние evil."
    (when (bound-and-true-p evil-mode)
      (propertize evil-state 'face 'shaoline-mode-face)))
  #+end_src

** /Flycheck/ — количество ошибок и предупреждений:

  #+begin_src emacs-lisp
  (shaoline-define-simple-segment shaoline-segment-flycheck
    "Ошибки/предупреждения flycheck."
    (when (bound-and-true-p flycheck-mode)
      (let ((err (flycheck-count-errors flycheck-current-errors)))
        (propertize
         (format "E:%d W:%d"
                 (or (cdr (assq 'error   err)) 0)
                 (or (cdr (assq 'warning err)) 0))
         'face 'shaoline-modified-face))))
  #+end_src

Подробные примеры лежат в =examples/custom-segments.el=.

** Поведение центрального сегмента/сообщения

По умолчанию shaoline-always-visible = t. Даже если вы вызываете (message "foo") или какой-то пакет пишет в эхо-область, Shaoline остаётся видимой: пользовательское сообщение появится в центре, строка не мерцает.

** Чтобы Shaoline исчезал на время чужих message (классическое поведение):

  #+begin_src emacs-lisp
  (setq shaoline-always-visible nil)
  #+end_src

shaoline-message-timeout управляет, когда строка возвращается после сообщений.

Пользовательские сообщения (~message~, ~display-warning~ и т.п.) отображаются в центре до прихода нового непустого или ручного очистки (message nil).

** Пишем свой сегмент (свой путь)

Сегмент — это функция, возвращающая только строку.

#+begin_src emacs-lisp
(shaoline-define-segment shaoline-segment-buffer-size (buffer)
  "Размер буфера в KiB."
  (format "%.1f KiB" (/ (buffer-size buffer) 1024.0)))

(push 'shaoline-segment-buffer-size (alist-get :right shaoline-segments))
#+end_src

Побочные эффекты — долг кармы. Откажитесь от них.

** FAQ (Часто встречающиеся коаны)

1. *Где старая mode-line?*
   Снимите shaoline-autohide-modeline — она вернётся.
2. *Почему Shaoline исчезает при M-x?*
   Минибуфер говорит — Shaoline ждет, не мешая.
3. *Можно ли иконки Doom?*
   Да, установите all-the-icons и они появятся автоматически.
4. *Высокая загрузка CPU?*
   Обычно кто-то часто вызывает message. Включите shaoline-debug.
5. *Работает ли на TTY?*
   Да. Иконки исчезают, луна становится ASCII — дзен остаётся.
6. *Сообщение в центре не исчезает?*
   До поступления нового непустого. Очистить вручную: (message nil)
7. *Многострочные сообщения?*
   Первая строка + “ [more]”; остальное кратко появляется в эхо-области.
8. *Как закрепить Shaoline поверх всех сообщений?*
   shaoline-always-visible = t

** Диагностика

| Симптом                   | Возможно причина                                       | Проверка / решение                       |
|---------------------------+--------------------------------------------------------+------------------------------------------|
| Мерцание                  | Какой-то пакет часто вызывает пустой message           | (setq shaoline-debug t) ; /shaoline-logs/|
| Нет правого сегмента      | Слишком узкое окно                                     | Расширить или уменьшить right-padding    |
| Батарея N/A               | Нет батареи или функция неактивна                      | Скрыть сегмент или принять бренность     |
| Центр застрял             | Нет новых непустых сообщений                           | (message "clear") и (message nil)        |
| Центр пуст                | Сегмент не в :center, или нет advice                  | Убедитесь shaoline-segment-echo-message  |
| Строка не появляется      | shaoline-always-visible=nil, ждёт timeout              | shaoline-always-visible = t              |

** Индекс сегментов и рецептник

** Индикатор метода ввода

#+begin_src emacs-lisp
(push 'shaoline-segment-input-method
      (alist-get :right shaoline-segments))
#+end_src

Покажет “EN”, если метод не активен, или его имя, если активен (“РУС” и т. п.)

** Книга рецептов:

1. Org-clock в центре:

   #+begin_src emacs-lisp
   (shaoline-define-simple-segment shaoline-segment-org-clock
     "Текущий Org-clock, если есть."
     (when (and (fboundp 'org-clocking-p) (org-clocking-p))
       (concat "🕑 " (org-clock-get-clock-string))))
   (push 'shaoline-segment-org-clock (alist-get :center shaoline-segments))
   #+end_src

2. Tree-sitter язык (Emacs 29+):

   #+begin_src emacs-lisp
   (shaoline-define-simple-segment shaoline-segment-ts-lang
     "Имя языка tree-sitter."
     (when (boundp 'treesit-language-at)
       (format "%s" (treesit-language-at (point)))))
   (push 'shaoline-segment-ts-lang (alist-get :left shaoline-segments))
   #+end_src

3. Hostname TRAMP:

   #+begin_src emacs-lisp
   (shaoline-define-simple-segment shaoline-segment-tramp-host
     "Показать user@host при TRAMP."
     (when (file-remote-p default-directory)
       (tramp-file-name-host (tramp-dissect-file-name default-directory))))
   (push 'shaoline-segment-tramp-host (alist-get :right shaoline-segments))
   #+end_src

*** Отключение всех динамичных сегментов

#+begin_src emacs-lisp
(setq shaoline-enable-dynamic-segments nil)
#+end_src

Идеально для слабых машин, TTY, ssh, осознанных людей и бенчмарков.

** Дзэн производительности
*** Ядро компоновки < 0.15 мс
*** Шесть стандартных сегментов < 0.25 мс
*** Таймер раз в секунду только если сегменты действительно нужны
*** Можно подавить шум лога: (setq message-log-max nil)
** Совместимость

| Emacs | GUI | TTY | native-comp | Windows | macOS | GNU/Linux |
|-------+-----+-----+-------------+---------+-------+-----------|
|  27.1 | ✔︎   | ✔︎   | —           | ✔︎       | ✔︎     | ✔︎         |
|  28.x | ✔︎   | ✔︎   | —           | ✔︎       | ✔︎     | ✔︎         |
|  29.x | ✔︎   | ✔︎   | ✔︎           | ✔︎       | ✔︎     | ✔︎         |

** Дополнительное чтение

** Быстрый дзен: =README-QUICKZEN.org=
** Подробный FAQ: =README-FAQ.org=
** История версий: =CHANGELOG.org=

#+begin_quote
Документация — палец, указывающий на луну;  
Shaoline показывает саму луну и её фазу.
#+end_quote

** Вклад

PR, issue, поэмы и хайку принимаются открыто:  
https://github.com/11111000000/shaoline

#+begin_quote
«Встретил хранителя Пути — пригласи на лапшу».
— Дзэн-пословица
#+end_quote

** Лицензия

MIT. Копируйте, форкайте, отпускайте на волю.

---

Конец свитка. Закройте буфер, вдохните и вернитесь к коду.  
