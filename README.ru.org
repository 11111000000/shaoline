#+TITLE: Shaoline 3 — The Modeline of Nothingness evolves
#+AUTHOR: Бродячий Байт
#+EMAIL: 11111000000@email.com
#+LANGUAGE: ru
#+OPTIONS: num:nil ^:nil toc:2

#+begin_quote
“Строка-режима, которую можно увидеть, не есть вечная строка-режима.”
  — Лао-цзы, ~Emacs 27 + edition~
#+end_quote

#+ATTR_ORG: :width 80%
[[file:screenshot-shaoline.png]]

Был век, когда каждый буфер таскал тяжёлый пояс глифов, цифр и мигающих
виджетов. Потом скромный Lisp-скрипт обрился наголо, вошёл в эхо-область
и просто /был/.
Этот файл — /Shaoline 3/.

Shaoline заменяет традиционный /mode-line/ минималистичной строкой в
эхо-области. Она исчезает, когда Emacs должен говорить, или остаётся,
если таково ваше Дао. Она делает /ровно достаточно/ и /ни строчкой
больше/. Чтобы пройти по Пути — не делайте ничего; всё уже сделано.

#+begin_quote
“Когда не делается ничего — не остаётся ничего несделанным.”
  — Дао дэ цзин, §48
#+end_quote


- Быстрый старт

#+begin_src emacs-lisp
(use-package shaoline                ; MELPA/ELPA
  :ensure t
  :init   (require 'shaoline-mode)   ; интерфейсная прослойка
  :config (shaoline-mode 1))         ; включить глобально
#+end_src

Готово. Можно закрыть файл.
Ещё тут? — читайте далее.


- Архитектура пустоты

1. Core — ~shaoline.el~: чистые функции, ни побочных эффектов.
2. Effects — ~shaoline-effects.el~: /единственное/ место, где Shaoline
   трогает мир.
3. Strategy — ~shaoline-strategy.el~: адаптивная логика ~yin/yang/adaptive~.
4. UI — ~shaoline-mode.el~: включить, выключить, отчёты.
5. Garden — ~shaoline-segments.el~: коллекция сегментов (все чистые).

/Чистота хранится/, /грязь изолирована/ — метафизика производительности.


- Основные фичи — Отблески Пустоты

1. /Эхо-область и только/ — ни child-frame, ни overlay.
2. /Четырёхуровневая архитектура/ — Core ↦ Effects ↦ Strategy ↦ UI.
3. /Стратегии yin / yang / adaptive/ — авто-переключение по нагрузке,
   размеру файла, удалённости, GUI/TTY.
4. /EXWM-совместимый правый отступ/ — выравнивается под системный трей.
5. /Подсказка текущих клавиш/ — незавершённые префиксы видны сразу.
6. /Token bucket/ — шейпинг трафика обновлений.
7. /TTL-кеш/ и /async/ для тяжёлых сегментов (battery, project).
8. /Нулевые таймеры, пока не понадобятся/ — ядро остаётся без них.
9. /Устойчивый центр/ — последнее полезное сообщение живёт, пока не
   появится новое.
10. /Автономия/ — работает в TTY, без иконок, зависимостей = 0, если не
    захотите большего.

/— Сколько зависимостей у Shaoline, учитель?
— Му./


- Конфигурация

* Сегменты по умолчанию

#+begin_src emacs-lisp
(setq shaoline-segments
      '((:left   shaoline-segment-major-mode-icon
                 shaoline-segment-buffer-name
                 shaoline-segment-current-keys
                 shaoline-segment-modified)
        (:center shaoline-segment-echo-message)
        (:right  shaoline-segment-position       ; [строка:колонка]
                 shaoline-segment-project-name
                 shaoline-segment-git-branch
                 shaoline-segment-battery
                 shaoline-segment-time)))         ; HH:MM
#+end_src

Изменить — просто переставьте или уберите функции.

* Ключевые переменные (частичный список)

| Переменная                       | Значение по умолчанию | Смысл                                  |
|----------------------------------+-----------------------+----------------------------------------|
| shaoline-mode-strategy           | 'yang                 | yin / yang / adaptive                  |
| shaoline-enable-dynamic-segments | t                     | Часы, батарея и прочие таймерные штуки |
| shaoline-right-margin            | 1                     | Фиксированный правый отступ            |
| shaoline-with-tray               | t                     | Автовыравнивание под EXWM-трей         |
| shaoline-hide-modeline           | t                     | Скрывать классический mode-line        |
| shaoline-update-debounce         | 0.15                  | Троттлинг курсорных команд             |
| shaoline-cache-ttl               | 2.0                   | Общая TTL для кеша                     |
| shaoline-debug                   | nil                   | Подробные логи в /shaoline-logs/         |

Интерактивно: =M-x customize-group RET shaoline RET=


- Стратегии Дао

- =yin= — пассивен: нет хуков, таймеров, всегда ручной =M-x shaoline-refresh=.
- =yang= — активно виден всегда, обрабатывает сообщения, скрывает
  mode-line.
- =adaptive= — автоматически выбирает yin/yang: большой файл? — yin,
  GUI-редактирование? — yang.

Переключиться на лету: =M-x shaoline-toggle-strategy=

- Сегменты — Сад чистых функций

| Сегмент         | Что показывает                         | Требует                 |
|-----------------+----------------------------------------+-------------------------|
| buffer-name     | Имя буфера                             | —                       |
| modified        | «*» если буфер изменён                 | —                       |
| current-keys    | Активный префикс / C-u 42 / «C-x»      | —                       |
| position        | Строка (и колонка, если нужно)         | —                       |
| major-mode-icon | Иконка/аббревиатура режима             | all-the-icons (opt.)    |
| project-name    | Имя проекта (кеш 2 c)                  | project.el / projectile |
| git-branch      | Текущая ветка                          | vc-git                  |
| battery         | Процент + иконка (асинхронно, TTL 5 c) | battery.el, async.el    |
| time            | 24 h часы                              | —                       |
| echo-message    | Последнее не-пустое (message …)        | —                       |

Больше в ~shaoline-segments.el~ или пишите свои:

#+begin_src emacs-lisp
(shaoline-define-segment shaoline-segment-ts-lang ()
  (when (fboundp 'treesit-language-at)
    (format "%s" (treesit-language-at (point)))))
(push 'shaoline-segment-ts-lang (alist-get :left shaoline-segments))
#+end_src


- Отступ под EXWM-трей

Если у вас EXWM и системный трей, Shaoline меряет его ширину (в
пикселях), переводит в символы и корректирует ~shaoline-right-margin~
на лету. Выключить: ~(setq shaoline-with-tray nil)~


- Часто задаваемые коаны

1. /Куда делся мой mode-line?/
   ~(setq shaoline-hide-modeline nil)~ или выключите Shaoline.
2. /Почему строка пропадает при M-x?/
   Мини-буфер занят, Shaoline уступает.
3. /Мигает echo-area!/
   Какой-то пакет спамит ~(message nil)~. Включите ~shaoline-debug~.
4. /Работает ли в TTY?/
   Дао не зависит от GUI; иконки превращаются в текст, остальное живо.
5. /Как принудительно обновить?/
   =M-x shaoline-refresh=.
6. /Как очистить строку?/
   =M-x shaoline-clear=.

- Сброс к изначальной пустоте

#+begin_src emacs-lisp
(shaoline-total-cleanup)   ;; убирает таймеры, хуки, восстанавливает всё
#+end_src


- Производительность

- Сбор строки < 0.2 мс (6 сегментов).
- Таймеры запускаются /только/ если есть динамические сегменты.
- Token bucket: не более 10 обновлений/сек даже при спаме.
- Память микроскопична — самое тяжёлое — этот README.

#+begin_quote
Документация — палец, указывающий на Луну;
Shaoline показывает и Луну, и её фазу.
#+end_quote


- Лицензия

MIT. Копируйте, форкайте, привяжите к воздушному змею и отпустите.

---

Закройте буфер, вдохните, вернитесь к коду — /ничто не нужно добавлять,
ничто не нужно убирать/.
