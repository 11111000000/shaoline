#+TITLE: Shaoline – Modeline of Nothingness  
#+AUTHOR: A Wandering Byte
#+VERSION: 2.2.2
#+EMAIL: 11111000000@email.com 
#+LANGUAGE: en  
#+OPTIONS: num:nil ^:nil toc:2

#+begin_quote
«The mode-line that can be seen is not the eternal mode-line.»  
—  (Lao-Tsé, ~~approx. 400 B.C.~~ Emacs 27+)
#+end_quote

#+ATTR_ORG: :width 80%
[[file:screenshot-shaoline.png]]

There was a time when every buffer carried a heavy belt of glyphs, numbers and
blinking widgets.  
One day a little Lisp file shaved its head, sat quietly in the echo area and
simply /was/.  
That file is /Shaoline/.

Shaoline replaces the traditional mode-line with a minimalist, fully functional
string that appears in the echo area – and disappears the moment Emacs has
something else to say, unless you ask it otherwise.  
It does /just enough/ and then /stops/.  
To walk /its/ Way you do nothing, and yet /everything gets done/.

#+begin_quote
«When nothing is done, nothing remains undone.»  
— ~Tao Te Ching~ §48 (Developer edition)
#+end_quote

* Quick sip of tea (TL;DR)

#+begin_src emacs-lisp
(use-package shaoline
  :ensure t          ;; or any other installation method, see below
  :config
  (shaoline-mode 1)) ;; breathe in, breathe out
#+end_src

Already enlightened? Skip the rest, go pet a cat.  
Still here? Read on.

* Features (the things Shaoline promptly forgets)

1. /Echo-area only/ – no child frames, no window hacking, no monkey business.
2. /Functional core/ – every segment is a pure function: input → string, nothing more.
3. /No timers by default/ – the line refreshes only on real events; optional
   timer starts /only if/ you enable time or battery.
4. /Debounced updates/ – rapid commands cause a single, smooth repaint (flicker
   begone).
5. /Optional mode-line hiding/ – see the void where the old bar used to be.
6. /Zero required dependencies/ – icons, battery, projectile, etc. load lazily
   and only if you want them.
7. /Unit-test friendly/ – core composer is completely side-effect free.
8. /Persistent center/ – last non-empty message stays until a new one arrives.
9. /Chan humour/
10. /Always-visible option/ – if enabled (default), the Shaoline modeline remains visible even when =message= is called (see below).

#+begin_quote
Student: «Master, how many dependencies does Shaoline have?»  
Master: «Mu.»  
— classic koan, condensed
#+end_quote

* Installation

** GNU ELPA / MELPA

#+begin_src emacs-lisp
M-x package-install RET shaoline RET
#+end_src

** Straight / Quelpa / Git

Clone and add to =load-path= or use your favourite package manager.  
Requires Emacs 27.1+, a cup of tea optional.

* Philosophy ⇒ Configuration

Shaoline’s default setup is sane for /most/ mortals.  
Yet the Way is personal; tweak as you please.

#+begin_src emacs-lisp
(setq shaoline-segments
      '((:left   shaoline-segment-major-mode-icon
                 shaoline-segment-buffer-name
                 shaoline-segment-modified
                 shaoline-segment-minor-modes)
        (:center shaoline-segment-echo-message)
        (:right  shaoline-segment-position
                 shaoline-segment-project-name
                 shaoline-segment-git-branch
                 shaoline-segment-battery
                 shaoline-segment-input-method
                 shaoline-segment-digital-clock
                 shaoline-segment-moon-phase)))
#+end_src

/NEW in 2.2.1:/  
Right side segment order is now: position, then project name, VCS, battery, input-method, time, and moon—see =CHANGELOG.org= for context.

Variables worth chanting over:

| Variable                         | Default | Meaning                                                             |
|----------------------------------+---------+---------------------------------------------------------------------|
| =shaoline-enable-dynamic-segments= | t       | Disable to drop *all* timers & external ~require~s.                   |
| =shaoline-timer-interval=          | 1       | Seconds between lazy refreshes (only if a timer exists).            |
| =shaoline-always-visible=          | t       | If non-nil, Shaoline remains visible even when `message` is called. |
| =shaoline-autohide-modeline=       | t       | Hide the old mode-line globally.                                    |
| =shaoline-exclude-modes=           | list    | Major modes that keep their belt.                                   |
| =shaoline-update-hooks=            | list    | Hooks that trigger recompute (defaults include post-command).       |
| =shaoline-message-timeout=         | 10      | (Advanced) Seconds to wait before re-showing Shaoline after user    |
|                                  |         | message if always-visible is nil.                                   |
| =shaoline-project-name-ttl=        | 2       | TTL (seconds) to cache the project-name segment (less disk I/O).    |
| =shaoline-battery-ttl=             | 5       | TTL (seconds) to cache the battery segment (fewer DBus/syscalls).   |
| =shaoline-right-padding=           | 0       | Extra spaces after the right segment.                               |
| =shaoline-debug=                   | nil     | Log to */shaoline-logs/* buffer.                                      |

Interactively customise with:

#+begin_src emacs-lisp
M-x customize-group RET shaoline RET
#+end_src

Remember: the fewer settings you touch, the closer you are to Emptiness.

* TTL-caching of heavy segments

Since v2.2.2, expensive/IO-heavy segments (like `shaoline-segment-project-name` and `shaoline-segment-battery`) are automatically cached for their TTL (default 2s and 5s).

- Tune cache duration in `M-x customize-group RET shaoline-caching RET` (variables `shaoline-project-name-ttl`, `shaoline-battery-ttl`).
- To forcibly fetch an uncached value (for testing/refresh, e.g. in timers), call the raw segment alias:
  #+begin_src emacs-lisp
  (shaoline--segment-project-name-raw)
  (shaoline--segment-battery-raw)
  #+end_src

* Standard segments

| Symbol                         | What it shows                       | Depends on             |
|--------------------------------+-------------------------------------+------------------------|
| shaoline-segment-position      | Line & column position              | –                      |
| shaoline-segment-modified      | “*” if buffer is modified           | –                      |
| shaoline-segment-echo-message  | Last non-empty message (persistent) | –                      |
| shaoline-segment-minor-modes   | Important minor modes (icons)       | –                      |
| shaoline-segment-project-name  | Project (project.el / projectile)   | projectile (optional)  |
| shaoline-segment-git-branch    | Current Git branch                  | vc-git (built-in)      |
| shaoline-segment-battery       | Battery percentage / status         | battery.el (built-in)  |
| shaoline-segment-input-method  | Input method / layout indicator     | –                      |
| shaoline-segment-digital-clock | 24-h clock                          | calendar.el (built-in) |
| shaoline-segment-moon-phase    | Moon phase 🌓/ASCII                | calendar.el (built-in) |

Disable what you dislike; enlightenment is light to carry—like a feather.

* Integrations & customisations

Shaoline integrates seamlessly with popular packages. Add segments lazily,
preserving minimalism.

- /Evil-mode/ – current state:

  #+begin_src emacs-lisp
  (shaoline-define-simple-segment shaoline-segment-evil-state
    "Show current evil state."
    (when (bound-and-true-p evil-mode)
      (propertize evil-state 'face 'shaoline-mode-face)))
  #+end_src

  Then add it e.g. to =:left=.

- /Flycheck/ – error counts:

  #+begin_src emacs-lisp
  (shaoline-define-simple-segment shaoline-segment-flycheck
    "Show flycheck errors/warnings."
    (when (bound-and-true-p flycheck-mode)
      (let ((err (flycheck-count-errors flycheck-current-errors)))
        (propertize
         (format "E:%d W:%d"
                 (or (cdr (assq 'error   err)) 0)
                 (or (cdr (assq 'warning err)) 0))
         'face 'shaoline-modified-face))))
  #+end_src

More examples live in =examples/custom-segments.el=.

* /NEW/: Always-visible option & message persistence

By default in 2.2.1, ~shaoline-always-visible~ is =t=, which means even when you run ~(message "foo")~ or a package displays a transient message, Shaoline continues to show its modeline—with the new user message shown *in the center*.  
This avoids modeline "flicker" or persistent disappearance.

- If you want Shaoline to disappear for the duration of normal messages (i.e., classic behaviour), set:

  #+begin_src emacs-lisp
  (setq shaoline-always-visible nil)
  #+end_src

- See also: =shaoline-message-timeout= (seconds to wait before Shaoline repaints if =always-visible= is nil).

User messages (via =message=, =display-warning=, etc.) now always persist in the center segment until a new non-empty message arrives—or you dismiss it explicitly with ~(message nil)~.

* Writing your own segment (become the Master)

A segment is a function that returns /only/ a string.

#+begin_src emacs-lisp
(shaoline-define-segment shaoline-segment-buffer-size (buffer)
  "Return buffer size in KiB."
  (format "%.1f KiB" (/ (buffer-size buffer) 1024.0)))

(push 'shaoline-segment-buffer-size (alist-get :right shaoline-segments))
#+end_src

Side-effects are karmic debt—avoid them.

* FAQ (Frequently Asked Koans)

1. *Where did my old mode-line go?*  
   It renounced worldly attachments. Set =shaoline-autohide-modeline= to nil
   if you miss it.

2. *Why does Shaoline vanish when I run M-x?*  
   The minibuffer is talking. Shaoline waits politely.

3. *Can I use Doom icons?*  
   Yes. Install =all-the-icons=; Shaoline detects them like a ninja.

4. *High CPU?*  
   Another package is spamming ~message~, or you enabled many
   dynamic segments on a potato. Enable =shaoline-debug= to watch the river.

5. *Does Shaoline work on TTY?*  
   Absolutely. Icons vanish, moon glyphs degrade into ASCII; serenity remains.

6. *Center message persists forever!*  
   It holds until a new non-empty arrives. To clear manually: =(message nil)=.

7. *Multi-line messages?*  
   First line + “[more]” indicator; full text flashes in echo area briefly.

8. *How to force persistent Shaoline even on messages?*  
   Set =shaoline-always-visible= to t (default in v2.2.1+).

* Troubleshooting

| Symptom                 | Likely cause                                        | Quick test / remedy                                |
|-------------------------+-----------------------------------------------------+----------------------------------------------------|
| Flicker                 | Another package sends empty ~message~                 | =(setq shaoline-debug t)=; check *shaoline-logs*       |
| No right-side text      | Window too narrow                                   | Widen or set =shaoline-right-padding= -2             |
| Battery says N/A        | Battery absent or function nil                      | Accept impermanence (or hide segment)              |
| Stuck persistent text   | No new non-empty message                            | =(message "clear")= then =(message nil)=               |
| Center stays empty      | Segment not in :center or advice missing            | Ensure =shaoline-segment-echo-message= is in :center |
| Modeline won’t reappear | =shaoline-always-visible= is nil, waiting for timeout | Use =shaoline-always-visible= t                      |

* *New leaves on the bamboo* — extended wisdom  
  (v2.2.1 and above.)

** Complete segment index (a pocket scroll)

| Symbol                              | Pure? | Needs timer | Needs extra package   |
|-------------------------------------+-------+-------------+-----------------------|
| shaoline-segment-modified           | ✔︎     | –           | –                     |
| shaoline-segment-position           | ✔︎     | –           | –                     |
| shaoline-segment-minor-modes        | ✔︎     | –           | –                     |
| shaoline-segment-major-mode         | ✔︎     | –           | –                     |
| shaoline-segment-project-name       | ✔︎     | –           | projectile (optional) |
| shaoline-segment-git-branch         | ✔︎     | –           | vc-git (built-in)     |
| shaoline-segment-vcs-state          | ✔︎     | –           | vc-git (built-in)     |
| shaoline-segment-echo-message       | ✔︎     | –           | –                     |
| shaoline-segment-input-method       | ✔︎     | –           | –                     |
| shaoline-segment-battery            | ✔︎     | ✔︎           | battery.el            |
| shaoline-segment-digital-clock      | ✔︎     | ✔︎           | calendar.el           |
| shaoline-segment-moon-phase         | ✔︎     | ✔︎           | calendar.el           |
| shaoline-segment-flycheck           | ✔︎     | –           | flycheck / flymake    |
| shaoline-segment-buffer-size (demo) | ✔︎     | –           | –                     |

Legend: “✔︎ timer” = starts a lazy timer *only* when present.

** Input-method indicator (layouts, IME, etc.)

#+begin_src emacs-lisp
(push 'shaoline-segment-input-method
      (alist-get :right shaoline-segments))
#+end_src

Shows “EN” when no input method is active, otherwise its title (“РУС”,
“日”, …).

** Cookbook – ready-made snippets

1. *Org-clock timer in the centre*

   #+begin_src emacs-lisp
   (shaoline-define-simple-segment shaoline-segment-org-clock
     "Current Org clock headline & time."
     (when (and (fboundp 'org-clocking-p) (org-clocking-p))
       (concat "🕑 " (org-clock-get-clock-string))))
   (push 'shaoline-segment-org-clock (alist-get :center shaoline-segments))
   #+end_src

2. *Tree-sitter language (Emacs 29+)*

   #+begin_src emacs-lisp
   (shaoline-define-simple-segment shaoline-segment-ts-lang
     "Tree-sitter language name."
     (when (boundp 'treesit-language-at)
       (format "%s" (treesit-language-at (point)))))
   (push 'shaoline-segment-ts-lang (alist-get :left shaoline-segments))
   #+end_src

3. *Remote host name over TRAMP*

   #+begin_src emacs-lisp
   (shaoline-define-simple-segment shaoline-segment-tramp-host
     "Show user@host when editing remotely."
     (when (file-remote-p default-directory)
       (tramp-file-name-host (tramp-dissect-file-name default-directory))))
   (push 'shaoline-segment-tramp-host (alist-get :right shaoline-segments))
   #+end_src

Feel free to PR your snippets into *examples/*.

** Disabling *all* dynamic parts — totally silent Shaoline

#+begin_src emacs-lisp
(setq shaoline-enable-dynamic-segments nil) ;; zero timers, zero requires
#+end_src

Ideal for:

• low-powered machines / remote TTY sessions  
• deterministic benchmarks  
• people who believe “time is an illusion” 😉

** Zen of performance (micro-benchmarks from CI)

• pure core compose < 0.15 ms (native-comp byte-code)  
• 6 standard segments < 0.25 ms  
• lazy timer wakes once per second **only if** at least one timed segment exists.  
Silence noisy packages with =(setq message-log-max nil)=.

** Migrating from ≤ 2.0

| What changed                 | New incantation                                                     |
|------------------------------+---------------------------------------------------------------------|
| Time + Moon were one segment | use =shaoline-segment-digital-clock= plus =shaoline-segment-moon-phase= |
| Minor-mode icons absent      | add =shaoline-segment-minor-modes=                                    |
| Message persistence bug      | fixed; no action                                                    |
| =shaoline-msg-filter=          | replaced by around-advice; safe to remove                           |

** Compatibility matrix (tested in CI)

| Emacs | GUI | TTY | Native-comp | Windows | macOS | GNU/Linux |
|-------+-----+-----+-------------+---------+-------+-----------|
|  27.1 | ✔︎   | ✔︎   | –           | ✔︎       | ✔︎     | ✔︎         |
|  28.x | ✔︎   | ✔︎   | –           | ✔︎       | ✔︎     | ✔︎         |
|  29.x | ✔︎   | ✔︎   | ✔︎           | ✔︎       | ✔︎     | ✔︎         |

** Further reading

- Quick Zen guide: =README-QUICKZEN.org=  
- Russian scrolls: =README.ru.org= & =README-FAQ.org=  
- CHANGELOG for the full tale of versions.

#+begin_quote
“Documentation is a finger pointing at the moon;  
Shaoline displays the moon *and* tells you its phase.”  
#+end_quote

* Contributing

Pull requests, issues, poems, haiku – all welcome at
[[https://github.com/11111000000/shaoline][GitHub]].

#+begin_quote
«If you meet the maintainer on the road, invite him for noodles.»  
— Zen proverb (draft)
#+end_quote

* License

MIT. Copy it, fork it, glue it to a kite and let it fly.

---  
End of scroll. Close this buffer, take a breath, return to coding.  
Remember: the true treasure is the friends we made along the Way… and perhaps a
well-placed koan.
