TITLE: Shaoline – Modeline of Nothingness  
#+AUTHOR: A Wandering Byte  
#+EMAIL: 11111000000@email.com  
#+LANGUAGE: en  
#+OPTIONS: num:nil ^:nil toc:2

#+begin_quote
“The mode-line that can be seen is not the eternal mode-line.”  
  — Lao-Tse, ~Emacs 27+ edition~
#+end_quote

#+ATTR_ORG: :width 80%
[[file:screenshot-shaoline.png]]

There was an age when every buffer wore a heavy belt of glyphs, numbers, and blinking widgets.  
Then, a simple Lisp script shaved its head, took its place in the echo area, and simply /was/.  
That file is *Shaoline*.

Shaoline replaces the traditional mode-line with a minimalist, fully functional string, shown in the echo area.  
It disappears the moment Emacs needs to speak, or remains if you ask.  
It does /just enough/ and then /nothing more/.  
To walk its Dao, do nothing; all gets done.

#+begin_quote
“When nothing is done, nothing remains undone.”  
  — Tao Te Ching, §48
#+end_quote

---

- Quick Start

#+begin_src emacs-lisp
(use-package shaoline
  :ensure t
  :config
  (shaoline-mode 1))
#+end_src

Content? Skip the rest.  
Curious? Let the water flow on.

---

- Features (reflections of emptiness)

1. /Echo-area only/ — no child frames, windows, overlays.
2. /Functional core/ — each segment is a pure function: input → string.
3. /Timers only when truly needed/ — only if time or battery segments are enabled.
4. /Debounced updates/ — multiple triggers collapse to a single, smooth repaint.
5. /Mode-line hiding optional/ — see the void if you wish.
6. /Zero required dependencies/ — icons, battery, projects, and more, only if wanted.
7. /Unit-test friendly/ — the core composer is pure, no side effects.
8. /Persistent center/ — the last non-empty message stays until a new one comes.
9. /Chan humour/ — a touch of zen mischief may appear.
10. /Always-visible option/ — modeline can be anchored beneath your code, even during temporary messages.

#+begin_quote
Student: “Master, how many dependencies does Shaoline have?”  
Master: “Mu.”  
— classic koan
#+end_quote

---

- Installation

* GNU ELPA/MELPA *
#+begin_src emacs-lisp
M-x package-install RET shaoline RET
#+end_src

* Straight/Quelpa/Git *
Clone and add to ~load-path~, or use your favorite package manager.  
Needs Emacs 27.1 or newer.

---

- Philosophy ⇒ Configuration

Shaoline’s default setup suits most needs, but the Dao is personal.  
Tweak segments for your own path.

#+begin_src emacs-lisp
(setq shaoline-segments
      '((:left   shaoline-segment-major-mode-icon
                 shaoline-segment-buffer-name
                 shaoline-segment-modified
                 shaoline-segment-minor-modes)
        (:center shaoline-segment-echo-message)
        (:right  shaoline-segment-position
                 shaoline-segment-project-name
                 shaoline-segment-git-branch
                 shaoline-segment-battery
                 shaoline-segment-input-method
                 shaoline-segment-digital-clock
                 shaoline-segment-moon-phase)))
#+end_src

Order and content are fully customizable.

| Variable                         | Default | Meaning                                                                 |
|----------------------------------+---------+-------------------------------------------------------------------------|
| shaoline-enable-dynamic-segments | t       | Disable to drop timers & external segments (time, battery, etc.)        |
| shaoline-timer-interval          | 1       | Seconds between periodic refreshes (timer starts only if really needed) |
| shaoline-always-visible          | t       | Modeline always visible, even on (message ...)                          |
| shaoline-enable-hooks            | t       | If nil, disables all update hooks, only manual refresh                  |
| shaoline-attach-advices          | t       | If nil, never adds advices (for messages/warnings)                      |
| shaoline-attach-hooks            | t       | If nil, never adds/removes hooks automatically                          |
| shaoline-message-timeout         | 10      | Seconds to wait before shaoline redraw after a message                  |
| shaoline-project-name-ttl        | 2       | TTL (sec) to cache project name, less disk I/O                          |
| shaoline-battery-ttl             | 5       | TTL (sec) to cache battery status/level                                 |
| shaoline-autohide-modeline       | t       | Hide the old modeline bar while shaoline-mode is active                 |
| shaoline-exclude-modes           | list    | Modes to /not/ hide classic mode-line                                     |
| shaoline-update-hooks            | list    | Hooks that trigger repaint                                              |
| shaoline-right-padding           | 0       | Extra spaces after the right segment                                    |
| shaoline-debug                   | nil     | Log to //shaoline-logs//                                                  |

Tweak interactively with:
#+begin_src emacs-lisp
M-x customize-group RET shaoline RET
#+end_src

- Total control: “Wu Wei” (do not, let flow)
For total purity, disable everything side-effectful:
#+begin_src emacs-lisp
(setq shaoline-enable-hooks nil
      shaoline-always-visible nil
      shaoline-enable-dynamic-segments nil
      shaoline-attach-advices nil
      shaoline-attach-hooks nil)
(shaoline-mode 1)
(global-set-key (kbd "<f8>") #'shaoline--update)
#+end_src

To remove all traces after experimenting:
#+begin_src emacs-lisp
(shaoline-purge-infra)
#+end_src

---

- TTL-Cache for Heavy Segments

Segments like project name and battery state may be slow. They are TTL-cached (default: 2s and 5s).

- Customize via =M-x customize-group RET shaoline-caching RET=
- To obtain an immediate (uncached) value for testing:
#+begin_src emacs-lisp
(shaoline--segment-project-name-raw)
(shaoline--segment-battery-raw)
#+end_src

---

- Standard Segments

| Symbol                         | What it shows                           | Requires              |
|--------------------------------+-----------------------------------------+-----------------------|
| shaoline-segment-position      | Line and column                         | —                     |
| shaoline-segment-modified      | “*” if buffer is modified               | —                     |
| shaoline-segment-echo-message  | Last non-empty message (center)         | —                     |
| shaoline-segment-minor-modes   | Minor-modes as icons                    | —                     |
| shaoline-segment-project-name  | Project name (project.el or projectile) | projectile (optional) |
| shaoline-segment-git-branch    | Current Git branch                      | vc-git                |
| shaoline-segment-battery       | Battery percent/status                  | battery.el            |
| shaoline-segment-input-method  | Active input method                     | —                     |
| shaoline-segment-digital-clock | 24h clock (e.g. “21:43”)                | calendar.el           |
| shaoline-segment-moon-phase    | Moon phase icon or ASCII                | calendar.el           |

Remove what doesn’t serve you.  
Enlightenment is lighter than a feather.

---

- Integrations & Custom Segments

Shaoline works seamlessly with Flycheck, Evil, and others.  
Segments may be added at will.

- /Evil-mode/ — display state:
#+begin_src emacs-lisp
(shaoline-define-simple-segment shaoline-segment-evil-state
  "Show current evil state."
  (when (bound-and-true-p evil-mode)
    (propertize evil-state 'face 'shaoline-mode-face)))
#+end_src

- /Flycheck/ — error count:
#+begin_src emacs-lisp
(shaoline-define-simple-segment shaoline-segment-flycheck
  "Show flycheck errors/warnings."
  (when (bound-and-true-p flycheck-mode)
    (let ((err (flycheck-count-errors flycheck-current-errors)))
      (propertize
       (format "E:%d W:%d"
               (or (cdr (assq 'error   err)) 0)
               (or (cdr (assq 'warning err)) 0))
       'face 'shaoline-modified-face))))
#+end_src

More examples may be seen in =examples/custom-segments.el=.

---

- Message Persistence & "Always-visible" Option

By default, Shaoline’s center segment shows the latest non-empty user message, even if =message= is called.  
To have classic behaviour (Shaoline disappears for the duration of a message):

#+begin_src emacs-lisp
(setq shaoline-always-visible nil)
#+end_src

User messages persist until another message or ~(message nil)~ is issued.

---

- Writing Your Own Segment

A segment is simply a function returning a string (no side effects):
#+begin_src emacs-lisp
(shaoline-define-segment shaoline-segment-buffer-size (buffer)
  "Return buffer size in KiB."
  (format "%.1f KiB" (/ (buffer-size buffer) 1024.0)))
(push 'shaoline-segment-buffer-size (alist-get :right shaoline-segments))
#+end_src

Side-effects are karmic debt; avoid them.

---

- FAQ (Frequently Asked Koans)

1. /Where did my old mode-line go?/  
   Set shaoline-autohide-modeline to nil to restore it.
2. /Why does Shaoline vanish when I run M-x?/  
   Minibuffer speaks; Shaoline waits silently.
3. /Can I use Doom icons?/  
   Yes: =all-the-icons= is supported if installed.
4. /High CPU?/  
   Likely another package spamming messages, or too many dynamic segments on a weak machine. Enable shaoline-debug and watch /shaoline-logs/.
5. /Work on TTY?/  
   Yes—icons vanish, moon becomes ASCII; tranquility remains.
6. /Center message persists!/  
   Until a new non-empty arrives; clear with (message nil).
7. /Multi-line messages?/  
   First line with [more] indicator; full content shown briefly in the echo area.
8. /How to force Shaoline always visible?/  
   Set shaoline-always-visible = t.

---

- Troubleshooting

| Symptom               | Possible Cause                           | Solution / Test                         |
|-----------------------+------------------------------------------+-----------------------------------------|
| Flicker               | Another package is messaging rapidly     | (setq shaoline-debug t) in /shaoline-logs/   |
| No right segment      | Window too narrow                        | Widen or adjust shaoline-right-padding  |
| Battery “N/A”         | No battery or not recognized             | Hide segment or accept impermanence     |
| Center doesn’t update | No new non-empty messages                | (message nil) to clear                  |
| Modeline not visible  | shaoline-always-visible = nil, waiting   | Set shaoline-always-visible = t         |

---

- Segment Index and Cookbook

* Input-method indicator *
#+begin_src emacs-lisp
(push 'shaoline-segment-input-method
      (alist-get :right shaoline-segments))
#+end_src

Displays “EN” if no input-method; otherwise, its title.

* Cookbook examples *

1. /Org-clock in center/:
   #+begin_src emacs-lisp
   (shaoline-define-simple-segment shaoline-segment-org-clock
     "Show current Org-clock if any."
     (when (and (fboundp 'org-clocking-p) (org-clocking-p))
       (concat "🕑 " (org-clock-get-clock-string))))
   (push 'shaoline-segment-org-clock (alist-get :center shaoline-segments))
   #+end_src

2. /Tree-sitter language (Emacs 29+)/:
   #+begin_src emacs-lisp
   (shaoline-define-simple-segment shaoline-segment-ts-lang
     "Tree-sitter language name."
     (when (boundp 'treesit-language-at)
       (format "%s" (treesit-language-at (point)))))
   (push 'shaoline-segment-ts-lang (alist-get :left shaoline-segments))
   #+end_src

3. /TRAMP remote host/:
   #+begin_src emacs-lisp
   (shaoline-define-simple-segment shaoline-segment-tramp-host
     "Show user@host if over TRAMP."
     (when (file-remote-p default-directory)
       (tramp-file-name-host (tramp-dissect-file-name default-directory))))
   (push 'shaoline-segment-tramp-host (alist-get :right shaoline-segments))
   #+end_src

---

- Disabling /all/ dynamic segments

#+begin_src emacs-lisp
(setq shaoline-enable-dynamic-segments nil)
#+end_src

Perfect for minimalism, TTY, underpowered machines, or deterministic benchmarks.

---

- Zen of Performance

- Core string composition: <0.15 ms
- Six segments: <0.25 ms
- Timer runs only if actually needed
- Noise can be silenced by setting (setq message-log-max nil)

---

- Migration

| Change                   | New incantation                                                    |
|--------------------------+--------------------------------------------------------------------|
| Time+Moon together       | Use shaoline-segment-digital-clock and shaoline-segment-moon-phase |
| Minor-mode icons missing | Add shaoline-segment-minor-modes                                   |
| Center message bug       | Fixed                                                              |

---

- Compatibility

| Emacs | GUI | TTY | Native Comp | Windows | macOS | Linux |
|-------+-----+-----+-------------+---------+-------+-------|
|  27.1 | ✔︎   | ✔︎   | –           | ✔︎       | ✔︎     | ✔︎     |
|  28.x | ✔︎   | ✔︎   | –           | ✔︎       | ✔︎     | ✔︎     |
|  29.x | ✔︎   | ✔︎   | ✔︎           | ✔︎       | ✔︎     | ✔︎     |

---

- Further Reading

- Quick Zen: =README-QUICKZEN.org=
- FAQ: =README-FAQ.org=
- Change history: =CHANGELOG.org=

#+begin_quote
Documentation is a finger pointing at the moon;  
Shaoline reveals both the moon and its phase.
#+end_quote

---

- Contributions

Pull requests, issues, poems, haiku are welcome at:  
https://github.com/11111000000/shaoline

#+begin_quote
“If you meet the maintainer on the road, invite him for noodles.”  
— Zen proverb
#+end_quote

---

- License

MIT. Copy it, fork it, glue it to a kite and let it fly.

---

End of scroll. Close this buffer, breathe in, return to code.  
The true treasure is the friends we made on the Way…  
and a well-placed koan.
