#+TITLE: Shaoline â€“ Modeline of Nothingness  
#+AUTHOR: A Wandering Byte
#+VERSION: 2.1.1
#+EMAIL: 11111000000@email.com 
#+LANGUAGE: en  
#+OPTIONS: num:nil ^:nil toc:2

#+begin_quote
Â«The mode-line that can be seen is not the eternal mode-line.Â»  
â€”  (Lao-TsÃ©, ~~approx. 400 B.C.~~ Emacs 27+)
#+end_quote

There was a time when every buffer carried a heavy belt of glyphs, numbers and blinking widgets.  
One day a little Lisp file shaved its head, sat quietly in the echo area and simply /was/.  
That file is /Shaoline/.

Shaoline replaces the traditional mode-line with a minimalist, fully functional string that
appears in the echo area â€“ and disappears the moment Emacs has something else to say.  
It does /just enough/ and then /stops/.  
To walk /its/ Way you do nothing, and yet /everything gets done/.

#+begin_quote
Â«When nothing is done, nothing remains undone.Â»  
â€” ~Tao Te Ching~ Â§48 (Developer edition)
#+end_quote

---

** Quick sip of tea (TL;DR)

#+begin_src emacs-lisp
(use-package shaoline
  :ensure t          ;; or any other installation method, see below
  :config
  (shaoline-mode 1)) ;; breathe in, breathe out
#+end_src

Already enlightened?  Skip the rest, go pet a cat.  
Still here?  Read on.

** Features (the things Shaoline promptly forgets)

1. /Echo-area only/ â€“ no child frames, no window hacking, no monkey business.
2. /Functional core/ â€“ every segment is a pure function: input â†’ string, nothing more.
3. /No timers by default/ â€“ the line refreshes only on real events; optional timer starts /only if/ you enable time or battery.
4. /Debounced updates/ â€“ rapid commands cause a single, smooth repaint (flicker begone).
5. /Optional mode-line hiding/ â€“ see the void where the old bar used to be.
6. /Zero required dependencies/ â€“ icons, battery, projectile, etc. load lazily and only if you want them.
7. /Unit-test friendly/ â€“ core composer is completely side-effect free.
8. /Persistent center/ â€“ last non-empty message stays until a new one arrives.
9. /Chan humour/

#+begin_quote
Student: Â«Master, how many dependencies does Shaoline have?Â»  
Master: Â«Mu.Â»  
â€” classic koan, condensed
#+end_quote

** Installation

*** GNU ELPA / MELPA

#+begin_src emacs-lisp
M-x package-install RET shaoline RET
#+end_src

*** Straight / Quelpa / Git

Clone and add to =load-path= or use your favourite package manager.  
Requires Emacs 27.1+, a cup of tea optional.

** Philosophy â‡’ Configuration

Shaolineâ€™s default setup is sane for /most/ mortals.  
Yet the Way is personal; tweak as you please.

#+begin_src emacs-lisp
(setq shaoline-segments
      '((:left   shaoline-segment-icon-and-buffer)
        (:center shaoline-segment-echo-message)
        (:right  shaoline-segment-project-name
                 shaoline-segment-git-branch
                 shaoline-segment-battery
                 shaoline-segment-time
                 shaoline-segment-position)))
#+end_src

Variables worth chanting over:

| Variable                         | Default          | Meaning                                                 |
|----------------------------------+------------------+---------------------------------------------------------|
| =shaoline-enable-dynamic-segments= | t                | Turn off to drop /all/ timers & external ~require~s.      |
| =shaoline-timer-interval=          | 1                | Seconds between lazy refreshes (only if timer exists).  |
| =shaoline-autohide-modeline=       | t                | Hide the old mode-line globally.                        |
| =shaoline-exclude-modes=           | list             | Major modes that keep their belt.                       |
| =shaoline-update-hooks=            | (post-command â€¦) | Events that trigger recompute.                          |
| =shaoline-right-padding=           | 0                | Extra spaces after the right segment.                   |
| =shaoline-debug=                   | nil              | Log to /shaoline-logs/ buffer.                            |

Customize interactively with:

#+begin_src emacs-lisp
M-x customize-group RET shaoline RET
#+end_src

Remember: the fewer settings you touch, the closer you are to Emptiness. The path of least action leads to greatest peace.

** Standard segments

| Symbol                           | What it shows                     | Depends on               |
|----------------------------------+-----------------------------------+--------------------------|
| =shaoline-segment-icon-and-buffer= | Pretty icon + buffer name         | all-the-icons (optional) |
| =shaoline-segment-project-name=    | Project (project.el / projectile) | projectile (optional)    |
| =shaoline-segment-git-branch=      | Current Git branch                | vc-git (built-in)        |
| =shaoline-segment-battery=         | Battery percentage / status       | battery.el (built-in)    |
| =shaoline-segment-time=            | 24-h clock + moon phase ðŸŒ“       | calendar.el (built-in)   |
| =shaoline-segment-echo-message=    | Last non-empty message (persistent) | none                     |
| =shaoline-segment-position=        | Line and column position          | none                     |

Disable what you dislike; enlightenment is light to carryâ€”like a feather on the breeze.

** Integrations and Customizations

Shaoline integrates seamlessly with popular packages. Add segments lazily, preserving minimalism.

- /Evil-mode/: Create a segment for evil state:
  #+begin_src emacs-lisp
  (shaoline-define-simple-segment shaoline-segment-evil-state
    "Show current evil state."
    (when (bound-and-true-p evil-mode)
      (propertize evil-state 'face 'shaoline-mode-face)))
  #+end_src
  Add to =shaoline-segments= (e.g., :left).

- /Flycheck/: For error counts:
  #+begin_src emacs-lisp
  (shaoline-define-simple-segment shaoline-segment-flycheck
    "Show flycheck errors/warnings."
    (when (bound-and-true-p flycheck-mode)
      (let ((err (flycheck-count-errors flycheck-current-errors)))
        (propertize (format "E:%d W:%d" (or (cdr (assq 'error err)) 0) (or (cdr (assq 'warning err)) 0))
                    'face 'shaoline-modified-face))))
  #+end_src

For more examples, see =examples/custom-segments.el= in the package directory.

** Writing your own segment (become the Master)

A segment is a function that returns a string; nothing more, nothing less.

#+begin_src emacs-lisp
(shaoline-define-segment shaoline-segment-buffer-size (buffer)
  "Return buffer size in KiB."
  (format "%.1f KiB" (/ (buffer-size buffer) 1024.0)))

;; Attach it somewhere:
(push 'shaoline-segment-buffer-size
      (alist-get :right shaoline-segments))
#+end_src

Pure functions only!  Side-effects are karmic debtâ€”avoid them as one avoids muddy puddles.

** FAQ (Frequently Asked Koans)

1. /Where did my old mode-line go?/  
   It renounced worldly attachments.  Toggle =shaoline-autohide-modeline= to false. (Or contemplate impermanence.)

2. /Why does Shaoline vanish when I run M-x?/  
   The minibuffer is talking.  Shaoline politely waitsâ€”like a student before the master.

3. /Can I use Doom icons?/  
   Yes.  Install =all-the-icons=; Shaoline will detect them like a silent ninja in moonlight.

4. /High CPU?/  
   Either you enabled dynamic segments on a potato, or another package is spamming ~message~.  
   Use =(setq shaoline-debug t)= to watch the river flow. (And giggle at the fish.)

5. /Does Shaoline work on TTY?/  
   Absolutely.  Moon glyphs degrade gracefully into ASCII; icons vanish like morning mist. TTY is the ultimate minimalism. See TTY screenshots in the repo.

6. /Why does the center message persist forever?/  
   It holds the last non-empty message until a new one arrives. To clear manually: =(message nil)= (but it ignores empty, so use a non-empty then clear). Edge case: very long messages truncate gracefully.

7. /How to handle multi-line messages in center?/  
   They truncate to first line + "[more]" indicator. The full message appears in echo area temporarily.

** Troubleshooting

| Symptom            | Likely cause                                             | Quick test                                                  |
|--------------------+----------------------------------------------------------+-------------------------------------------------------------|
| Flicker            | Another package sends empty messages                     | Evaluate ~(shaoline-msg-engine)~; check logs                  |
| No right-side text | Window too narrow                                        | Widen or set =shaoline-right-padding= -2 (negative emptiness) |
| Battery says N/A   | No battery in machine, or ~battery-status-function~ is nil | Accept impermanence                                         |
| Persistent msg stuck | No new non-empty message sent                            | Send a new =(message "Clear")= then =(message nil)=           |

** Contributing

Pull requests, issues, poems, haiku â€“ all welcome at [[https://github.com/11111000000/shaoline][GitHub]].

#+begin_quote
Â«If you meet the maintainer on the road, invite him for noodles.Â»  
â€” Zen proverb (draft)
#+end_quote

** License

MIT.  Copy it, fork it, glue it to a kite and let it fly.

---  
End of scroll.  Close this buffer, take a breath, return to coding.  
Remember: the true treasure is the friends we made along the Way... and perhaps a well-placed koan.

#+ATTR_ORG: :width 80%
[[file:screenshot-shaoline.png]]
#+ATTR_ORG: :width 80%
[[file:screenshot-persistent.png]] ;; Example for persistent center
